// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.skydoves.pokedex.core.network.model

import com.skydoves.pokedex.core.model.Pokemon
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class PokemonResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<PokemonResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("count", "next", "previous",
      "results")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "count")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "next")

  private val listOfPokemonAdapter: JsonAdapter<List<Pokemon>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Pokemon::class.java), emptySet(),
      "results")

  public override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("PokemonResponse").append(')') }

  public override fun fromJson(reader: JsonReader): PokemonResponse {
    var count: Int? = null
    var next: String? = null
    var previous: String? = null
    var results: List<Pokemon>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> count = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("count", "count",
            reader)
        1 -> next = nullableStringAdapter.fromJson(reader)
        2 -> previous = nullableStringAdapter.fromJson(reader)
        3 -> results = listOfPokemonAdapter.fromJson(reader) ?: throw Util.unexpectedNull("results",
            "results", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return PokemonResponse(
        count = count ?: throw Util.missingProperty("count", "count", reader),
        next = next,
        previous = previous,
        results = results ?: throw Util.missingProperty("results", "results", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: PokemonResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("count")
    intAdapter.toJson(writer, value_.count)
    writer.name("next")
    nullableStringAdapter.toJson(writer, value_.next)
    writer.name("previous")
    nullableStringAdapter.toJson(writer, value_.previous)
    writer.name("results")
    listOfPokemonAdapter.toJson(writer, value_.results)
    writer.endObject()
  }
}
