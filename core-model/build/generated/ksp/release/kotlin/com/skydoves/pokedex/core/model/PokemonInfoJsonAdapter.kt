// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.skydoves.pokedex.core.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class PokemonInfoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<PokemonInfo>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "name", "height", "weight",
      "base_experience", "types", "hp", "attack", "defense", "speed", "exp")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val listOfTypeResponseAdapter: JsonAdapter<List<PokemonInfo.TypeResponse>> =
      moshi.adapter(Types.newParameterizedType(List::class.java,
      PokemonInfo.TypeResponse::class.java), emptySet(), "types")

  @Volatile
  private var constructorRef: Constructor<PokemonInfo>? = null

  public override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("PokemonInfo").append(')') }

  public override fun fromJson(reader: JsonReader): PokemonInfo {
    var id: Int? = null
    var name: String? = null
    var height: Int? = null
    var weight: Int? = null
    var experience: Int? = null
    var types_: List<PokemonInfo.TypeResponse>? = null
    var hp: Int? = 0
    var attack: Int? = 0
    var defense: Int? = 0
    var speed: Int? = 0
    var exp: Int? = 0
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> height = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("height", "height",
            reader)
        3 -> weight = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("weight", "weight",
            reader)
        4 -> experience = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("experience",
            "base_experience", reader)
        5 -> types_ = listOfTypeResponseAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("types_", "types", reader)
        6 -> {
          hp = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("hp", "hp", reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          attack = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("attack", "attack",
              reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          defense = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("defense", "defense",
              reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          speed = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("speed", "speed", reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          exp = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("exp", "exp", reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffff83f.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  PokemonInfo(
          id = id ?: throw Util.missingProperty("id", "id", reader),
          name = name ?: throw Util.missingProperty("name", "name", reader),
          height = height ?: throw Util.missingProperty("height", "height", reader),
          weight = weight ?: throw Util.missingProperty("weight", "weight", reader),
          experience = experience ?: throw Util.missingProperty("experience", "base_experience",
              reader),
          types = types_ ?: throw Util.missingProperty("types_", "types", reader),
          hp = hp as Int,
          attack = attack as Int,
          defense = defense as Int,
          speed = speed as Int,
          exp = exp as Int
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<PokemonInfo> = this.constructorRef ?:
          PokemonInfo::class.java.getDeclaredConstructor(Int::class.javaPrimitiveType,
          String::class.java, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
          Int::class.javaPrimitiveType, List::class.java, Int::class.javaPrimitiveType,
          Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
          Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          id ?: throw Util.missingProperty("id", "id", reader),
          name ?: throw Util.missingProperty("name", "name", reader),
          height ?: throw Util.missingProperty("height", "height", reader),
          weight ?: throw Util.missingProperty("weight", "weight", reader),
          experience ?: throw Util.missingProperty("experience", "base_experience", reader),
          types_ ?: throw Util.missingProperty("types_", "types", reader),
          hp,
          attack,
          defense,
          speed,
          exp,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: PokemonInfo?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value_.id)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("height")
    intAdapter.toJson(writer, value_.height)
    writer.name("weight")
    intAdapter.toJson(writer, value_.weight)
    writer.name("base_experience")
    intAdapter.toJson(writer, value_.experience)
    writer.name("types")
    listOfTypeResponseAdapter.toJson(writer, value_.types)
    writer.name("hp")
    intAdapter.toJson(writer, value_.hp)
    writer.name("attack")
    intAdapter.toJson(writer, value_.attack)
    writer.name("defense")
    intAdapter.toJson(writer, value_.defense)
    writer.name("speed")
    intAdapter.toJson(writer, value_.speed)
    writer.name("exp")
    intAdapter.toJson(writer, value_.exp)
    writer.endObject()
  }
}
